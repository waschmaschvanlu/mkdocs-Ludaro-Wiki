{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Ludaro Wiki (ENG)","text":"<p>Choose your Language  Deutsch or English</p>"},{"location":"deutsch/willkommen/","title":"Willkommen bei der Ludaro Wiki","text":"<p>Die Ludaro Wiki ist ein privates Projekt, das ausschlie\u00dflich von mir (Ludaro), einem deutschen Entwickler, erstellt und gepflegt wird.</p> <p>Mein Ziel mit diesem Projekt ist es, die Entwicklungsumgebung in Five-M zu verbessern und wertvolle Ressourcen f\u00fcr lernende Entwickler bereitzustellen.</p> <p>Diese Dokumentation ist benutzerfreundlich und leicht verst\u00e4ndlich gestaltet. Sie ist nicht als umfassendes Nachschlagewerk gedacht, sondern als hilfreicher Leitfaden f\u00fcr diejenigen, die neu in der Five-M-Entwicklung sind.</p> <p>Als alleiniger Entwickler hinter diesem Projekt bin ich immer bereit, Unterst\u00fctzung und Tutorials f\u00fcr diejenigen bereitzustellen, die sie ben\u00f6tigen. Die Wiki selbst hat Abschnitte in Englisch und Deutsch, was sie f\u00fcr ein breiteres Publikum zug\u00e4nglich macht.</p> <p>Wenn Sie zus\u00e4tzliche Unterst\u00fctzung ben\u00f6tigen oder Fragen haben, k\u00f6nnen Sie mich gerne auf Discord (Louvii &lt;3#0815) kontaktieren. Ich bin immer hier, um zu helfen!y</p>"},{"location":"english/welcome/","title":"Welcome to the Ludaro Wiki","text":"<p>The Ludaro Wiki is a private project created and maintained solely by me (Ludaro), a German developer. </p> <p>My goal with this project is to improve the development environment in Five-M and provide valuable resources to learning developers.</p> <p>This documentation is designed to be user-friendly and easy to understand. It is not intended to serve as a comprehensive reference, but rather as a helpful guide for those who are new to Five-M development.</p> <p>As the sole developer behind this project, I am always willing to provide assistance and tutorials to those who need it. The Wiki itself has sections in both English and German, making it accessible to a wider audience.</p> <p>If you need additional assistance or have any questions, feel free to contact me on Discord (Louvii &lt;3#0815). I am always here to help!</p>"},{"location":"english/lua-beginners/begin/","title":"where to begin learning lua?","text":"<p>Hey there, Lua enthusiasts! I'm Ludaro, and I'm here to help you learn Lua programming specifically for Fivem. This wiki is dedicated to providing simple tips and guidance for beginners like you who are interested in mastering Lua.</p> <p>Lua is a beginner-friendly programming language, but it's not the only language used in Fivem. You can also code in C# and JS, which are more complex. Don't worry though, I'll cover those languages in this wiki as well, if I find the time for it ;)</p> <p>When it comes to learning Lua, I encourage you to approach it with passion, not just out of necessity. Feel free to explore different learning methods and find what works best for you. Remember, learning Lua should be a journey that you enjoy and find fulfilling.</p> <p>To start off, it's important to have a clear reason for learning Lua and how you plan to utilize your scripts. Think about what makes your scripts special and what you want to achieve with them. Additionally, consider if you want to work with NUIs (Native UI) and if so, start by learning Lua first, then move on to JS, HTML, and CSS.</p> <p>If you prefer learning Lua with a tutor, I highly recommend checking out the MyScripts-Lua-Learning Playlist (German language, but subtitles are available). If you prefer a more wiki-style approach, then join me on this exciting journey and read everything I've compiled on this topic!</p> <p>Before diving into Lua, it's essential to have some basic knowledge. For example, \"--\" is used to comment out code, meaning the server will ignore those lines. It's commonly used to write notes or temporarily disable a function that isn't working correctly. These comments are meant for your eyes only and won't affect the code execution.</p> <p>Let's get started on your Lua programming adventure! Feel free to explore the rest of the wiki and enjoy learning Lua for Fivem.</p>"},{"location":"english/lua-beginners/whatis/","title":"Introduction to Lua Basics and Usage","text":"<p>This page provides an introduction to basic Lua concepts and their practical application. Lua is a powerful programming language commonly used in Fivem scripting to create dynamic and interactive experiences. Understanding these fundamental concepts is essential for effectively utilizing Lua in your scripts.</p>"},{"location":"english/lua-beginners/whatis/#local-variables","title":"Local Variables","text":"<p>In Lua, local variables are used to store and manipulate data within a specific scope. They allow you to assign values to variables and reference them later in your code. Here are some examples of local variables:</p> <pre><code>local playerName = \"John\"\nlocal playerAge = 25\n</code></pre> <p>In the code snippet above, <code>playerName</code> is assigned the value \"John\", and <code>playerAge</code> is assigned the value 25. These variables can be used throughout your script to perform various operations and store temporary or permanent data.</p>"},{"location":"english/lua-beginners/whatis/#data-types","title":"Data Types","text":"<p>Lua supports various data types that determine how values are stored and manipulated. The most common data types in Lua are:</p> <ul> <li>Strings: Strings represent sequences of characters enclosed in quotation marks. They are used to store and manipulate textual data. Here's an example:</li> </ul> <pre><code>local message = \"Hello, Lua!\"\n</code></pre> <ul> <li>Numbers: Numbers represent numerical values, including integers and floating-point numbers. They are used for mathematical calculations. Here's an example:</li> </ul> <pre><code>local count = 10\nlocal pi = 3.14\n</code></pre> <ul> <li>Booleans: Booleans represent logical values and can only be <code>true</code> or <code>false</code>. They are used in conditional statements and logical operations. Here's an example:</li> </ul> <pre><code>local isReady = true\nlocal isGameOver = false\n</code></pre> <ul> <li>Tables: Tables are Lua's primary data structure, allowing you to store and organize complex data. They can hold multiple values and associate them with keys. Tables can be used to represent arrays, dictionaries, and objects. Here's an example:</li> </ul> <pre><code>local player = {\nname = \"John\",\nlevel = 5,\nhealth = 100,\n}\n</code></pre> <ul> <li>Functions: Functions are blocks of reusable code that can be called and executed. They are essential for organizing and structuring your script's logic. Here's an example:</li> </ul> <pre><code>local function greetPlayer(name)\nprint(\"Hello, \" .. name .. \"!\")\nend\ngreetPlayer(\"John\") -- Output: Hello, John!\n</code></pre> <p>These data types provide the building blocks for creating dynamic and interactive scripts in Lua.</p>"},{"location":"english/lua-beginners/whatis/#control-flow","title":"Control Flow","text":"<p>Control flow statements allow you to control the execution of your script based on certain conditions. Lua supports conditional statements and loops.</p> <ul> <li>Conditional Statements: Conditional statements are used to perform different actions based on specific conditions. The most common conditional statements are <code>if</code>, <code>else</code>, and <code>elseif</code>. Here's an example:</li> </ul> <pre><code>local temperature = 25\nif temperature &gt; 30 then\nprint(\"It's hot!\")\nelseif temperature &gt; 20 then\nprint(\"It's warm.\")\nelse\nprint(\"It's cool.\")\nend\n</code></pre> <ul> <li>Loops: Loops are used to repeat a set of instructions multiple times. Lua provides different types of loops, including <code>while</code> and <code>for</code>. Here's an example of a <code>while</code> loop:</li> </ul> <pre><code>local countdown = 10\nwhile countdown &gt; 0 do\nprint(countdown)\ncountdown = countdown - 1\nend\n</code></pre> <p>Lua's control flow statements enable you to create dynamic and flexible scripts that respond to different conditions and iterate over data.</p>"},{"location":"english/lua-beginners/whatis/#functions-and-modules","title":"Functions and Modules","text":"<p>Functions in Lua are blocks of reusable code that can be called</p> <p>and executed. They are essential for organizing and structuring your script's logic. Here's an example of a function that calculates the square of a number:</p> <pre><code>local function calculateSquare(number)\nreturn number * number\nend\nlocal result = calculateSquare(5)\nprint(result) -- Output: 25\n</code></pre> <p>Lua also supports modules, which are collections of related functions and variables that can be used across multiple scripts. Modules help organize code and promote reusability. Here's an example of a module:</p> <pre><code>-- File: mathUtils.lua\nlocal mathUtils = {}\nfunction mathUtils.calculateSquare(number)\nreturn number * number\nend\nreturn mathUtils\n</code></pre> <p>In another script, you can import and use the functions from the module like this:</p> <pre><code>local mathUtils = require(\"mathUtils\")\nlocal result = mathUtils.calculateSquare(5)\nprint(result) -- Output: 25\n</code></pre> <p>Using functions and modules allows you to create modular and reusable code, improving code organization and maintainability.</p>"},{"location":"english/lua-beginners/whatis/#threads","title":"Threads","text":"<p>In Fivem, a thread refers to a function created using <code>Citizen.CreateThread</code>. A thread is executed repeatedly at a specified interval, often used for tasks such as checking if a player is within a certain distance. However, it is important to use threads cautiously, as improper usage can cause server crashes when combined with other threaded operations.</p> <p>Some operations need to run every millisecond, but constantly checking certain conditions at that frequency can make the script laggy. Instead, you can specify the interval using <code>Citizen.Wait</code> to pause the thread execution. For example:</p> <pre><code>Citizen.CreateThread(function()\nwhile true do\nCitizen.Wait(5000) -- Wait for 5000 milliseconds (5 seconds)\nprint(\"Heyo\")\nend\nend)\n</code></pre> <p>The above code will print \"Heyo\" every 5 seconds.</p>"},{"location":"english/lua-beginners/whatis/#nui-and-nativeui","title":"NUI and NativeUI","text":"<ul> <li> <p>NUI (Natural User Interface): NUI refers to HTML websites embedded within Fivem scripts, such as an inventory interface. To work with NUI, you need knowledge of CSS, HTML, and basic JavaScript.</p> </li> <li> <p>NativeUI: NativeUI is a built-in user interface in F</p> </li> </ul> <p>ivem that can be controlled using Lua.</p>"},{"location":"english/lua-beginners/whatis/#serverclient-events","title":"Server/Client Events","text":"<p>Server/Client events are similar to functions, but they can be used across multiple scripts or Lua files. They enable communication between the server and clients.</p> <p>For example, let's say we want to register a command (<code>/test</code>) that executes something on the server side and prints a message in the client console. We can achieve this using the <code>RegisterCommand</code> function:</p> <pre><code>RegisterCommand('test', function(source, args, rawCommand)\nprint(\"Hey, I'm in the client console!\")\nTriggerServerEvent(\"thisisaserverevent\", args[0])\nend)\n</code></pre> <p>The above code registers the command <code>test</code> and defines the actions to be executed when it is triggered. It prints a message in the client console and triggers a server event named <code>thisisaserverevent</code> with the argument <code>args[0]</code>.</p> <p>For more information on server functions, refer to the Fivem scripting reference.</p>"},{"location":"english/lua-beginners/whatis/#callbacks","title":"Callbacks","text":"<p>Callbacks are a way to exchange data between the server and client. One commonly used callback system is the ESX callback system. It allows you to send and receive data between the server and client within a single function. Here's an example using the ESX callback system:</p> <p>In client.lua: <pre><code>ESX.TriggerServerCallback(\"NameYourOwnTrigger\", function(playersonline, myOwnID)\nprint(playersonline .. \" are online\")\nlocal myownID = GetPlayerServerId(PlayerId()) -- Retrieve your own player ID\nend, myOwnID)\n</code></pre></p> <p>In server.lua: <pre><code>ESX.RegisterServerCallback('NameYourOwnTrigger', function(myOwnID, cb)\nlocal onlineplayers = 0\nfor _, playerId in ipairs(GetPlayers()) do\nonlineplayers = onlineplayers + 1\nend\nprint(\"Player that used this function was: \" .. myOwnID)\ncb(onlineplayers)\nend)\n</code></pre></p> <p>The code above demonstrates how to retrieve the number of players online and print it on the client side. It also sends the client's player ID back to the server.</p>"},{"location":"english/lua-beginners/whatis/#building-and-organizing-a-fivem-script","title":"Building and Organizing a FiveM Script","text":"<p>To effectively use a script in FiveM, it's important to understand how scripts are structured and organized.</p>"},{"location":"english/lua-beginners/whatis/#script-components-server-and-client","title":"Script Components: Server and Client","text":"<p>FiveM scripts consist of two main components: the server-side and the client-side. These components communicate with each other to create a synchronized and interactive experience.</p> <ul> <li> <p>Server-Side: The server-side of the script focuses on managing server-related tasks, such as player synchronization and database operations. It ensures the smooth functioning of the server and handles critical operations that affect the gameplay experience.</p> </li> <li> <p>Client-Side: The client-side of the script is responsible for handling game-related functionalities. It interacts with the game environment, spawns vehicles, changes weather conditions, and performs other client-specific actions. The client-side requests permission from the server-side for certain operations to maintain server authority and security.</p> </li> </ul>"},{"location":"english/lua-beginners/whatis/#shared-scripts","title":"Shared Scripts","text":"<p>In some cases, scripts may have components that are shared between the server-side and the client-side. These shared scripts typically contain configuration settings and shared functionalities. For example, a shared script may define settings like player movement speed or game rules that need to be consistent on both sides.</p> <p>The purpose of shared scripts is to centralize common code and ensure that both the server and client have access to the same settings and functionalities without duplicating the code. By keeping shared scripts separate, it promotes modularity and simplifies maintenance.</p>"},{"location":"english/lua-beginners/whatis/#the-fxmanifestlua-file","title":"The fxmanifest.lua File","text":"<p>The <code>fxmanifest.lua</code> file is a crucial component of a FiveM script. It provides important information about the script and its dependencies. Here's an example from a trucker job script:</p> <pre><code>fx_version 'cerulean'\ngame 'gta5'\nname \"Trucker job\"\nauthor 'Sukra, Ludaro'\ndescription 'Trucker Job for esx'\nversion '3.0'\nshared_scripts {\n'config.lua'\n}\nclient_scripts {\n'client.lua'\n}\nserver_scripts {\n'server.lua'\n}\n</code></pre> <p>In this example, the <code>fx_version</code> specifies the version of the FiveM framework required. The <code>game</code> field defines the targeted game for the script.</p> <p>The script's name, author, description, and version provide additional details about the script.</p> <p>The <code>shared_scripts</code> section lists the shared script files, such as <code>config.lua</code>, that contain configurations and shared functionalities used by both the server and client.</p> <p>The <code>client_scripts</code> section lists the script files specific to the client-side.</p> <p>The <code>server_scripts</code> section lists the script files specific to the server-side.</p> <p>By examining the <code>fxmanifest.lua</code>, you can understand the structure of the script and which parts are intended for the server-side or the client-side.</p>"},{"location":"english/lua-beginners/whatis/#github-and-markdown","title":"GitHub and Markdown","text":"<p>To gain a deeper understanding of how scripts are built and organized, you can explore examples on GitHub. GitHub repositories often contain detailed information about script structure, dependencies, and usage instructions.</p> <p>Markdown files, like the one you are currently reading, are commonly used in repositories to provide explanations, tutorials, and other documentation related to the script. These files make it easier to grasp the concepts and follow the instructions provided.</p> <p>By exploring GitHub repositories and markdown files, you can learn more about the intricacies of script development and enhance your understanding of FiveM scripting.</p>"},{"location":"english/nativeui/howto/","title":"How to use","text":"<p>ntroduction NativeUI and NativeUIReloaded are almost the same with some small Feature and Performance  Differences i would advise you use NativeUIReloaded if possible but both work almost  the same code wise (except the fxmanifest) to use NativeUI or NativeUI Reloaded (im gonna refer both to NativeUI) u firstly need to download them,  its very very important to not rename them, because they use direct paths to their files!  they wont work otherwise</p> <p>if you wanna use both of them in your script you should do 2 things: 1. setting up the fxmanifest go into your fxmanifest and add this under your client scripts  client_scripts {     '@NativeUILua_Reloaded/src/NativeUIReloaded.lua',     'client.lua' -- your client scripts here } go into your fxmanifest and add this under your client scripts </p> <p>client_scripts {     '@NativeUI/NativeUI.lua',     'client.lua' -- your client scripts here } sadly.. you cant, if you insert both it will just take the top one, you need to decide! for this step (after fxmanifest) and all other steps it doesnt matter which NativeUI version you have if there is a difference i will point it out by these warnings 2. using NativeUI in our script to use nativeui in our scripts you need to firstly initialize it, you do it by calling a native (thats in NativeUI) like this: this native (_menuPool) can be renamed to anything else i just call it _menuPool because i learned it that way _menuPool = NativeUI.CreatePool() this snippet should be on top of your file.</p> <p>after that we need a thread (read here about what a thread is and how its used) to process our menu every millisecond u can build it into a thread or make a new one for the part of this tutorial im gonna make a new one! &lt;3</p> <p>Citizen.CreateThread(function()     while true do         _menuPool:ProcessMenus()         -- if you want add any other stuff here     end end)</p> <p>-- to make it more performant i am advising you to make the menupool in its own thread, and make it like this:</p> <p>Citizen.CreateThread(function()     while true do         Citizen.Wait(1)         if _menuPool:IsAnyMenuOpen() then             _menuPool:ProcessMenus()         else             Citizen.Wait(150) -- this small line         end     end end) Now that the menu is in the script finally we are onto.. 3. Creating a Menu To Create a menu u need to first know how lua works and what functions are (you can read about it here)</p> <p>in our example we create a function that  a) Creates the menu b) Opens the menu for us (Insert \"YOUR MENU NAME\" and \"YOUR MENU DESCRIPTION\" with your desires) function OpenMenu()     mainmenu = NativeUI.CreateMenu(\"YOUR MENU NAME\",\"YOUR MENU DESCRIPTION\")     _menuPool:Add(mainmenu)     _menuPool:RefreshIndex()     _menuPool:MouseControlsEnabled (false)     _menuPool:MouseEdgeEnabled (false)     _menuPool:ControlDisablingEnabled(false)     mainmenu:Visible(true) end in this example \"mainmenu\" is an variable and can be switched out by any name you like :) thats it, thats easy right? holy shit, u made ur first menu! what a freaking legend!</p> <p>Now that our menu is not just emtpy.. we are gonna add an item to it  An Item is a Selectable Variable in a Menu (as example in ur clothes menu ur torso is a item i can choose and define) we do that like this: function OpenMenu()     mainmenu = NativeUI.CreateMenu(\"YOUR MENU NAME\",\"YOUR MENU DESCRIPTION\")     _menuPool:Add(mainmenu)     _menuPool:RefreshIndex()     _menuPool:MouseControlsEnabled (false)     _menuPool:MouseEdgeEnabled (false)     _menuPool:ControlDisablingEnabled(false)     mainmenu:Visible(true)     local ourfirstitem = NativeUI.CreateItem(\"Item Name\", \"Item Description\")     mainmenu:AddItem(ourfirstitem) end ourfirstitem again, is a variable which can be defined by you and changed to whatever u like :) Now we are gonna use it.</p> <p>Lets say we want.. to only open it when local Truckmenu = vector3(1233.8623, -3235.2698, 5.5287) -- for TruckMenu u can insert ur own Coordinates! just insert them below in the code or up here &lt;3 Citizen.CreateThread(function()     while true do         Citizen.Wait(0)         local pedCoord = GetEntityCoords(PlayerPedId())         if #(Truckmenu - pedCoord) &lt; 3.0 then -- there are alot of ways to check the distance, but this one is the most performant it will subtract both coords, and out comes how near the person is, if it is under 3.0 then..             ESX.ShowHelpNotification(Dr\u00fccke Hier um dein Truckermen\u00fc zu \u00d6ffnen!&lt;3)             if IsControlJustReleased(0, 38) then                 OpenMenu() -- this is a new function, that will open our menu                 end             end     end end)</p> <p>Citizen.CreateThread(function()     while true do         _menuPool:ProcessMenus()         Citizen.Wait(0)         local ped = PlayerPedId()         if isPedInAnyVehicle(ped) then             if IsControlJustReleased(0, 38) then                 OpenMenu()                 end             end     end end)</p> <p>both codes are stolen and modified from my truckermenu Now we have created our first menu!  for further instructions go along the whole NativeUI-WIKI-ENG Path, i will explain everything to u there, just try out your menu!</p>"},{"location":"english/nativeui/menu/","title":"Menu","text":""},{"location":"english/nativeui/menu/#code-documentation-nativeui-lua-menu-creation","title":"Code Documentation: NativeUI Lua Menu Creation","text":""},{"location":"english/nativeui/menu/#source-code","title":"Source Code","text":"<p>source <pre><code>--- CreateMenu\n--- Creates a new NativeUI menu.\n---@param Title string               -- The title of the menu.\n---@param Subtitle string            -- The subtitle of the menu.\n---@param X number                   -- The X position of the menu.\n---@param Y number                   -- The Y position of the menu.\n---@param TxtDictionary string       -- The text dictionary for the menu.\n---@param TxtName string             -- The text name for the menu.\n---@param Heading number             -- The heading of the menu.\n---@param R number                   -- The red color value.\n---@param G number                   -- The green color value.\n---@param B number                   -- The blue color value.\n---@param A number                   -- The alpha value.\n---@return table                     -- The created menu object.\n---@public\nfunction NativeUI.CreateMenu(Title, Subtitle, X, Y, TxtDictionary, TxtName, Heading, R, G, B, A)\n</code></pre></p>"},{"location":"english/nativeui/menu/#explanation","title":"Explanation","text":"<p>This function creates a new NativeUI menu. It takes several parameters to customize the appearance and behavior of the menu.</p> <p>Parameters:</p> <ul> <li><code>Title</code> (string): The title of the menu. It will be displayed at the top of the menu.</li> <li><code>Subtitle</code> (string): The subtitle of the menu. It will be displayed below the title.</li> <li><code>X</code> (number): The X position of the menu on the screen.</li> <li><code>Y</code> (number): The Y position of the menu on the screen.</li> <li><code>TxtDictionary</code> (string): The text dictionary for the menu. It determines the font used for the menu text.</li> <li><code>TxtName</code> (string): The text name for the menu. It specifies the font style for the menu text.</li> <li><code>Heading</code> (number): The heading of the menu. It represents the rotation angle of the menu.</li> <li><code>R</code> (number): The red color value for the menu elements.</li> <li><code>G</code> (number): The green color value for the menu elements.</li> <li><code>B</code> (number): The blue color value for the menu elements.</li> <li><code>A</code> (number): The alpha value for the menu elements (transparency).</li> </ul> <p>Return Value:</p> <ul> <li><code>table</code>: The created menu object. It can be used to add items, handle events, and customize the menu further.</li> </ul> <p>Note: The function <code>NativeUI.CreateMenu</code> is a wrapper around the <code>UIMenu.New</code> function defined below. It sets default values for some parameters and provides a simplified interface for creating menus.</p> <p>The <code>UIMenu.New</code> function is the core implementation of the menu creation process. It initializes various properties and elements of the menu.</p> <p>It is recommended to refer to the source code links provided in the comments for a detailed understanding of the code logic and implementation details.</p> <p>Please note that the code provided is part of the NativeUILua Reloaded library, which is a modified and improved version of the original NativeUI library for Grand Theft Auto V modding.</p>"},{"location":"english/nativeui/menu/#usage","title":"Usage","text":"<pre><code> menu = NativeUI.CreateMenu(\"YOUR MENU NAME\",\"YOUR MENU DESCRIPTION\")\n</code></pre>"},{"location":"english/nativeui/menu/#source-code_1","title":"source code","text":"<p>source <pre><code>function UIMenu.New(Title, Subtitle, X, Y, TxtDictionary, TxtName, Heading, R, G, B, A)\nlocal X, Y = tonumber(X) or 0, tonumber(Y) or 0\nif Title ~= nil then\nTitle = tostring(Title) or \"\"\nelse\nTitle = \"\"\nend\nif Subtitle ~= nil then\nSubtitle = tostring(Subtitle) or \"\"\nelse\nSubtitle = \"\"\nend\nif TxtDictionary ~= nil then\nTxtDictionary = tostring(TxtDictionary) or \"commonmenu\"\nelse\nTxtDictionary = \"commonmenu\"\nend\nif TxtName ~= nil then\nTxtName = tostring(TxtName) or \"interaction_bgd\"\nelse\nTxtName = \"interaction_bgd\"\nend\nif Heading ~= nil then\nHeading = tonumber(Heading) or 0\nelse\nHeading = 0\nend\nif R ~= nil then\nR = tonumber(R) or 255\nelse\nR = 255\nend\nif G ~= nil then\nG = tonumber(G) or 255\nelse\nG = 255\nend\nif B ~= nil then\nB = tonumber(B) or 255\nelse\nB = 255\nend\nif A ~= nil then\nA = tonumber(A) or 255\nelse\nA = 255\nend\nlocal _UIMenu = {\nLogo = Sprite.New(TxtDictionary, TxtName, 0 + X, 0 + Y, 431, 107, Heading, R, G, B, A),\nBanner = nil,\nTitle = UIResText.New(Title, 215 + X, 20 + Y, 1.15, 255, 255, 255, 255, 1, 1, 0),\nBetterSize = true,\nSubtitle = { ExtraY = 0 },\nWidthOffset = 0,\nPosition = { X = X, Y = Y },\nDrawOffset = { X = 0, Y = 0 },\nPagination = { Min = 0, Max = 10, Total = 9 },\nPageCounter = {\nisCustom = false,\nPreText = \"\",\n},\nExtra = {},\nDescription = {},\nItems = {},\nWindows = {},\nChildren = {},\nControls = {\nBack = {\nEnabled = true,\n},\nSelect = {\nEnabled = true,\n},\nLeft = {\nEnabled = true,\n},\nRight = {\nEnabled = true,\n},\nUp = {\nEnabled = true,\n},\nDown = {\nEnabled = true,\n},\n},\nParentMenu = nil,\nParentItem = nil,\n_Visible = false,\nActiveItem = 1000,\nDirty = false;\nReDraw = true,\nInstructionalScaleform = RequestScaleformMovie(\"INSTRUCTIONAL_BUTTONS\"),\nInstructionalButtons = {},\nOnIndexChange = function(menu, newindex)\nend,\nOnListChange = function(menu, list, newindex)\nend,\nOnSliderChange = function(menu, slider, newindex)\nend,\nOnProgressChange = function(menu, progress, newindex)\nend,\nOnCheckboxChange = function(menu, item, checked)\nend,\nOnListSelect = function(menu, list, index)\nend,\nOnSliderSelect = function(menu, slider, index)\nend,\nOnProgressSelect = function(menu, progress, index)\nend,\nOnItemSelect = function(menu, item, index)\nend,\nOnMenuChanged = function(menu, newmenu, forward)\nend,\nOnMenuClosed = function(menu)\nend,\nSettings = {\nInstructionalButtons = true,\nMultilineFormats = true,\nScaleWithSafezone = true,\nResetCursorOnOpen = true,\nMouseControlsEnabled = true,\nMouseEdgeEnabled = true,\nControlDisablingEnabled = true,\nDrawOrder = nil,\nAudio = {\nLibrary = \"HUD_FRONTEND_DEFAULT_SOUNDSET\",\nUpDown = \"NAV_UP_DOWN\",\nLeftRight = \"NAV_LEFT_RIGHT\",\nSelect = \"SELECT\",\nBack = \"BACK\",\nError = \"ERROR\",\n},\nEnabledControls = {\nController = {\n{ 0, 2 }, -- Look Up and Down\n{ 0, 1 }, -- Look Left and Right\n{ 0, 25 }, -- Aim\n{ 0, 24 }, -- Attack\n},\nKeyboard = {\n{ 0, 201 }, -- Select\n{ 0, 195 }, -- X axis\n{ 0, 196 }, -- Y axis\n{ 0, 187 }, -- Down\n{ 0, 188 }, -- Up\n{ 0, 189 }, -- Left\n{ 0, 190 }, -- Right\n{ 0, 202 }, -- Back\n{ 0, 217 }, -- Select\n{ 0, 242 }, -- Scroll down\n{ 0, 241 }, -- Scroll up\n{ 0, 239 }, -- Cursor X\n{ 0, 240 }, -- Cursor Y\n{ 0, 31 }, -- Move Up and Down\n{ 0, 30 }, -- Move Left and Right\n{ 0, 21 }, -- Sprint\n{ 0, 22 }, -- Jump\n{ 0, 23 }, -- Enter\n{ 0, 75 }, -- Exit Vehicle\n{ 0, 71 }, -- Accelerate Vehicle\n{ 0, 72 }, -- Vehicle Brake\n{ 0, 59 }, -- Move Vehicle Left and Right\n{ 0, 89 }, -- Fly Yaw Left\n{ 0, 9 }, -- Fly Left and Right\n{ 0, 8 }, -- Fly Up and Down\n{ 0, 90 }, -- Fly Yaw Right\n{ 0, 76 }, -- Vehicle Handbrake\n},\n},\n}\n}\nif Subtitle ~= \"\" and Subtitle ~= nil then\n_UIMenu.Subtitle.Rectangle = UIResRectangle.New(0 + _UIMenu.Position.X, 107 + _UIMenu.Position.Y, 431, 37, 0, 0, 0, 255)\n_UIMenu.Subtitle.Text = UIResText.New(Subtitle, 8 + _UIMenu.Position.X, 110 + _UIMenu.Position.Y, 0.35, 245, 245, 245, 255, 0)\n_UIMenu.Subtitle.BackupText = Subtitle\n_UIMenu.Subtitle.Formatted = false\nif string.starts(Subtitle, \"~\") then\n_UIMenu.PageCounter.PreText = string.sub(Subtitle, 1, 3)\nend\n_UIMenu.PageCounter.Text = UIResText.New(\"\", 425 + _UIMenu.Position.X, 110 + _UIMenu.Position.Y, 0.35, 245, 245, 245, 255, 0, \"Right\")\n_UIMenu.Subtitle.ExtraY = 37\nend\n_UIMenu.ArrowSprite = Sprite.New(\"commonmenu\", \"shop_arrows_upanddown\", 190 + _UIMenu.Position.X, 147 + 37 * (_UIMenu.Pagination.Total + 1) + _UIMenu.Position.Y - 37 + _UIMenu.Subtitle.ExtraY, 40, 40)\n_UIMenu.Extra.Up = UIResRectangle.New(0 + _UIMenu.Position.X, 144 + 38 * (_UIMenu.Pagination.Total + 1) + _UIMenu.Position.Y - 37 + _UIMenu.Subtitle.ExtraY, 431, 18, 0, 0, 0, 200)\n_UIMenu.Extra.Down = UIResRectangle.New(0 + _UIMenu.Position.X, 144 + 18 + 38 * (_UIMenu.Pagination.Total + 1) + _UIMenu.Position.Y - 37 + _UIMenu.Subtitle.ExtraY, 431, 18, 0, 0, 0, 200)\n_UIMenu.Description.Bar = UIResRectangle.New(_UIMenu.Position.X, 123, 431, 4, 0, 0, 0, 255)\n_UIMenu.Description.Rectangle = Sprite.New(\"commonmenu\", \"gradient_bgd\", _UIMenu.Position.X, 127, 431, 30)\n_UIMenu.Description.Text = UIResText.New(\"Description\", _UIMenu.Position.X + 5, 125, 0.35)\n_UIMenu.Background = Sprite.New(\"commonmenu\", \"gradient_bgd\", _UIMenu.Position.X, 144 + _UIMenu.Position.Y - 37 + _UIMenu.Subtitle.ExtraY, 290, 25)\nif _UIMenu.BetterSize == true then\n_UIMenu.WidthOffset = math.floor(tonumber(69))\n_UIMenu.Logo:Size(431 + _UIMenu.WidthOffset, 107)\n_UIMenu.Title:Position(((_UIMenu.WidthOffset + 431) / 2) + _UIMenu.Position.X, 20 + _UIMenu.Position.Y)\nif _UIMenu.Subtitle.Rectangle ~= nil then\n_UIMenu.Subtitle.Rectangle:Size(431 + _UIMenu.WidthOffset + 100, 37)\n_UIMenu.PageCounter.Text:Position(425 + _UIMenu.Position.X + _UIMenu.WidthOffset, 110 + _UIMenu.Position.Y)\nend\nif _UIMenu.Banner ~= nil then\n_UIMenu.Banner:Size(431 + _UIMenu.WidthOffset, 107)\nend\nend\nCitizen.CreateThread(function()\nif not HasScaleformMovieLoaded(_UIMenu.InstructionalScaleform) then\n_UIMenu.InstructionalScaleform = RequestScaleformMovie(\"INSTRUCTIONAL_BUTTONS\")\nwhile not HasScaleformMovieLoaded(_UIMenu.InstructionalScaleform) do\nCitizen.Wait(0)\nend\nend\nend)\nreturn setmetatable(_UIMenu, UIMenu)\nend\n</code></pre></p>"},{"location":"english/nativeui/whatis/","title":"What is NativeUI?","text":"<p>NativeUI is a powerful user interface library for creating interactive menus and UI elements in the popular game Grand Theft Auto V (GTA V). It provides developers with a comprehensive set of tools and functionalities to design and implement dynamic menus, submenus, items, and more within their custom game modifications.</p>"},{"location":"english/nativeui/whatis/#the-need-for-nativeui","title":"The Need for NativeUI","text":"<p>As the modding community for GTA V continues to grow, developers are constantly seeking ways to enhance the gameplay experience. One essential aspect of creating immersive mods is the ability to present information, options, and actions to players through intuitive and visually appealing user interfaces.</p> <p>NativeUI fills this need by offering a reliable and flexible solution to create custom menus and UI elements in GTA V. It allows developers to seamlessly integrate interactive interfaces into their mods, making it easier for players to navigate and interact with various in-game features.</p>"},{"location":"english/nativeui/whatis/#the-challenge-of-documentation","title":"The Challenge of Documentation","text":"<p>One significant challenge that developers face when working with NativeUI is the lack of comprehensive documentation. While the library itself has gained popularity and recognition within the modding community, there is no official wiki or centralized resource providing detailed information, examples, and guidelines on how to use NativeUI effectively.</p> <p>Developers often rely on scattered forum posts, community discussions, and trial-and-error methods to understand the library's functionalities and best practices. This fragmented knowledge can be time-consuming and frustrating, hindering the development process and limiting the potential of NativeUI.</p>"},{"location":"english/nativeui/whatis/#a-new-beginning-the-ludaro-nativeui-wiki","title":"A New Beginning: The Ludaro NativeUI Wiki","text":"<p>Recognizing the need for a centralized and comprehensive resource, this Ludaro NativeUI Wiki aims to be the starting point for developers looking to harness the full potential of NativeUI. With a dedicated wiki, we aim to provide detailed documentation, tutorials, examples, and troubleshooting guides that cover various aspects of NativeUI's features and usage.</p> <p>By compiling and organizing information in an easily accessible format, the Ludaro NativeUI Wiki strives to offer developers a valuable resource that streamlines the learning process, sparks creativity, and empowers them to create impressive UI experiences in their GTA V mods.</p>"},{"location":"english/nativeui/whatis/#what-to-expect-from-the-ludaro-nativeui-wiki","title":"What to Expect from the Ludaro NativeUI Wiki","text":"<p>The Ludaro NativeUI Wiki will cover a wide range of topics related to using NativeUI effectively, including:</p> <ul> <li>Installation and setup instructions for integrating NativeUI into your modding environment.</li> <li>An in-depth exploration of the library's core concepts, such as menus, submenus, items, and events.</li> <li>Step-by-step tutorials on creating various types of menus, from simple to complex.</li> <li>Best practices and design guidelines for creating visually appealing and user-friendly UI elements.</li> <li>Troubleshooting tips and common issues faced by developers, along with their solutions.</li> <li>Integration examples showcasing how NativeUI can be used in conjunction with other popular modding frameworks and libraries.</li> </ul> <p>With the Ludaro NativeUI Wiki as a centralized resource, developers will have a reliable reference point to turn to when working with NativeUI. It is our hope that this wiki will foster a sense of community collaboration, where developers can contribute their knowledge and insights, further enriching the available information and empowering fellow modders.</p>"},{"location":"english/nativeui/whatis/#join-the-ludaro-nativeui-wiki-community","title":"Join the Ludaro NativeUI Wiki Community","text":"<p>We invite developers, enthusiasts, and contributors from the GTA V modding community to join us in building and expanding the Ludaro NativeUI Wiki. Together, we can create a comprehensive knowledge hub that enables developers to push the boundaries of UI design in GTA V mods.</p> <p>Whether you are a seasoned developer with NativeUI expertise or someone just starting to explore its possibilities, your contributions are valuable. By sharing your insights, experiences, and code snippets, you can help shape the Ludaro NativeUI Wiki into a vibrant and invaluable resource for the entire modding community.</p> <p>Let's embark on this journey together, filling the documentation void surrounding NativeUI and paving the way for more immersive and engaging modding experiences in Grand Theft Auto V!</p>"},{"location":"english/nativeui/whatis/#nativeui-vs-nativeuireloaded-a-comparison-of-two-versions","title":"NativeUI vs. NativeUIReloaded: A Comparison of Two Versions","text":"<p>Within the GTA V modding community, you will encounter two versions of the NativeUI library: NativeUI and NativeUIReloaded. Although both versions serve a similar purpose, they differ in terms of features, performance, and development status. Let's delve into the reasons behind the existence of these two versions and examine their pros and cons.</p>"},{"location":"english/nativeui/whatis/#nativeui","title":"NativeUI","text":"<p>NativeUI, the original version of the library, has been widely used by modders for a considerable period. Developed in C#, NativeUI provides a solid foundation for creating interactive menus and UI elements in GTA V mods. It has been a go-to choice for many developers due to its established presence and familiarity.</p>"},{"location":"english/nativeui/whatis/#pros-of-nativeui","title":"Pros of NativeUI","text":"<ul> <li>Established Presence: NativeUI has a strong community following, with ample resources, examples, and support available.</li> <li>Familiarity: Developers who have experience with C# find NativeUI's syntax and usage intuitive.</li> <li>Compatibility: NativeUI works with various versions of GTA V and popular modding frameworks.</li> </ul>"},{"location":"english/nativeui/whatis/#cons-of-nativeui","title":"Cons of NativeUI","text":"<ul> <li>Limited Development: NativeUI's development has ceased, resulting in no new updates or improvements.</li> <li>Performance Limitations: In complex menu scenarios or with a large number of menu items, NativeUI may exhibit performance limitations.</li> </ul>"},{"location":"english/nativeui/whatis/#nativeuireloaded","title":"NativeUIReloaded","text":"<p>NativeUIReloaded emerged as a newer version of the library, developed in Lua. It aims to address some of the performance concerns of NativeUI while introducing optimizations and enhancements to enhance the modding experience.</p>"},{"location":"english/nativeui/whatis/#pros-of-nativeuireloaded","title":"Pros of NativeUIReloaded","text":"<ul> <li>Performance Improvements: NativeUIReloaded prioritizes performance optimization, making it more efficient for handling complex menus and a significant number of menu items.</li> <li>Ongoing Development: NativeUIReloaded is actively developed, with updates and improvements being made to address issues and introduce new features.</li> <li>Enhanced Features: NativeUIReloaded may offer additional features or functionalities not found in the original NativeUI, expanding modding possibilities.</li> </ul>"},{"location":"english/nativeui/whatis/#cons-of-nativeuireloaded","title":"Cons of NativeUIReloaded","text":"<ul> <li>Less Established: As a newer iteration, NativeUIReloaded may have fewer available resources, examples, and community support compared to NativeUI.</li> <li>Transition Challenges: Migrating from NativeUI to NativeUIReloaded may require adapting existing code, which can be time-consuming and potentially introduce compatibility issues with existing mods.</li> </ul>"},{"location":"english/nativeui/whatis/#conclusion","title":"Conclusion","text":"<p>Both NativeUI and NativeUIReloaded offer modders options based on their preferences and requirements. NativeUI's strength lies in its established community presence, while NativeUIReloaded focuses on performance enhancements and ongoing development.</p> <p>It is worth noting that both versions have ceased active development. However, NativeUIReloaded, being the newer iteration and developed in Lua, may offer improved performance compared to NativeUI. Modders should consider factors such as community support, compatibility with other mods, desired features, and performance requirements when choosing between the two.</p> <p>Ultimately, the decision hinges on the individual modder's goals, existing codebase, and the specific demands of their GTA V modding project.</p>"}]}